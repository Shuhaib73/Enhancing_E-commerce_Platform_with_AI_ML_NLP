# Workflow Configuration for the application
name: ecommerce-ai application


# Trigger workflow on push and pull request to the main branch
on:
  # push:
    # branches: [ "main" ]
  # pull_request:
    # branches: [ "main" ]


# Define and build jobs 
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest

    - name: Lint with flake8                  # Step 4: Lint the code using flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest                  # Step 5: Run tests using pytest
      run: |
        pytest 


  # Build and publish Docker image to Docker hub
  build-and-publish:
    needs: build                              # This job depends on the successful completion of the `build` job
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code                     # Step 1: Checkout the repository code
      uses: actions/checkout@v4

    - name: Set up Docker                     # Step 2: Set up Docker Buildx for building Docker images
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
    
    - name: Log in to Docker Hub              # Step 3: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username as a secret
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password as a secret
  
    - name: Build Docker image               # Step 4: Build the Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-ai:latest .

    - name: Push Docker image to Docker Hub   # Step 5: Push the Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-ai:latest